package crt;
class Node {
	 int key;
	 Node left, right;

	 public Node(int item) {
	     key = item;
	     left = right = null;
	 }
	}
public class Bst_rec {

	// Insert method
	 static Node insert(Node root, int key) {
	     // If the tree is empty, return a new node
	     if (root == null) {
	         return new Node(key);
	     }

	     // If key is already present, return the node
	     if (root.key == key) {
	         return root;
	     }

	     // Otherwise, recur down the tree
	     if (key < root.key) {
	         root.left = insert(root.left, key);
	     } else {
	         root.right = insert(root.right, key);
	     }

	     // Return the (unchanged) node pointer
	     return root;
	 }

	 // Utility function for inorder traversal
	 static void inorder(Node root) {
	     if (root != null) {
	         inorder(root.left);
	         System.out.print(root.key + " ");
	         inorder(root.right);
	     }
	 }

	 // Driver method
	 public static void main(String[] args) {
	     Node root = null;

	     root = insert(root, 50);
	     insert(root, 30);
	     insert(root, 20);
	     insert(root, 40);
	     insert(root, 70);
	     insert(root, 60);
	     insert(root, 80);

	     System.out.println("Inorder traversal of BST:");
	     inorder(root);
	 }

}

