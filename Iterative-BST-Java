package crt;
class Node {
    int key;
    Node left, right;

    Node(int item) {
        key = item;
        left = right = null;
    }
}

public class BST_Iterative {
	static Node insert(Node root, int x) {
        Node temp = new Node(x);
        if (root == null) return temp;

        Node parent = null;
        Node curr = root;

        while (curr != null) {
            parent = curr;
            if (x < curr.key)
                curr = curr.left;
            else if (x > curr.key)
                curr = curr.right;
            else
                return root; // Key already exists
        }

        if (x < parent.key)
            parent.left = temp;
        else
            parent.right = temp;

        return root;
    }

    // Inorder Traversal
    static void inorder(Node root) {
        if (root != null) {
            inorder(root.left);
            System.out.print(root.key + " ");
            inorder(root.right);
        }
    }

    // Delete a node in BST
    static Node deleteNode(Node root, int x) {
        if (root == null) return root;

        if (x < root.key)
            root.left = deleteNode(root.left, x);
        else if (x > root.key)
            root.right = deleteNode(root.right, x);
        else {
            // Node with one child or no child
            if (root.left == null)
                return root.right;
            else if (root.right == null)
                return root.left;

            // Node with two children: Get inorder successor
            Node succ = getSuccessor(root.right);
            root.key = succ.key;
            root.right = deleteNode(root.right, succ.key);
        }
        return root;
    }

    // Get inorder successor (smallest in the right subtree)
    static Node getSuccessor(Node curr) {
        while (curr.left != null)
            curr = curr.left;
        return curr;
    }

    // Main method
    public static void main(String[] args) {
        Node root = null;

        // Insert nodes
        root = insert(root, 10);
        insert(root, 5);
        insert(root, 15);
        insert(root, 12);
        insert(root, 18);

        System.out.print("Inorder before deletion: ");
        inorder(root);

        int x = 15;
        root = deleteNode(root, x);

        System.out.print("\nInorder after deleting " + x + ": ");
        inorder(root);
    }
}

